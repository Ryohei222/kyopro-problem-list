// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// generator zod {
//   provider          = "zod-prisma-types"
//   useMultipleFiles  = true // スキーマを複数ファイルに分けて生成
//   writeBarrelFiles  = false // インデックスファイルを生成しない
//   useTypeAssertions = true // 型アサーションを使用する
// }

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  AtCoderId     String?
  CodeforcesId  String?
  YukicoderId   String?
  AOJId         String?
  MOFEId        String?
  GitHubId      String?
  XId           String?
  BlogURL       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  problemset    ProblemSet[]
  star          Star[]
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum ProblemProvider {
  ATCODER
  CODEFORCES
  YUKICODER
  AOJ
  MOFE
}

model Problem {
  id                Int                 @id @default(autoincrement())
  provider          ProblemProvider     @default(ATCODER)
  contestId         String
  problemId         String
  title             String
  difficulty        Int?
  problemSetProblem ProblemSetProblem[]
}

model ProblemSet {
  id                 Int                 @id @default(autoincrement())
  name               String
  authorId           String
  description        String
  isPublic           Boolean             @default(false)
  author             User                @relation(fields: [authorId], references: [id])
  problemSetProblems ProblemSetProblem[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  stars              Star[]
}

model ProblemSetProblem {
  id           Int        @id @default(autoincrement())
  problemSetId Int
  problemId    Int
  memo         String
  hint         String
  order        Int
  problemSet   ProblemSet @relation(fields: [problemSetId], references: [id])
  problem      Problem    @relation(fields: [problemId], references: [id])
}

model Star {
  id           Int        @id @default(autoincrement())
  userId       String
  problemSetId Int
  user         User       @relation(fields: [userId], references: [id])
  problemSet   ProblemSet @relation(fields: [problemSetId], references: [id])

  @@unique([userId, problemSetId], name: "star_identifier")
}
