// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// generator zod {
//   provider          = "zod-prisma-types"
//   useMultipleFiles  = true // スキーマを複数ファイルに分けて生成
//   writeBarrelFiles  = false // インデックスファイルを生成しない
//   useTypeAssertions = true // 型アサーションを使用する
// }

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified DateTime?
  image         String        @default("")
  accounts      Account[]
  sessions      Session[]
  bio           String        @default("")
  aojId         String        @default("")
  atcoderId     String        @default("")
  codeforcesId  String        @default("")
  yukicoderId   String        @default("")
  mofeId        String        @default("")
  githubId      String        @default("")
  xId           String        @default("")
  blogURL       String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  problemLists  ProblemList[]
  stars         Star[]
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Resource {
  ATCODER
  CODEFORCES
  YUKICODER
  AOJ
  MOFE
}

model Problem {
  id                 Int                 @id @default(autoincrement())
  resource           Resource            @default(ATCODER)
  contestId          String
  problemId          String
  name               String
  difficulty         Int?
  problemListRecords ProblemListRecord[]
}

model ProblemList {
  id                 String              @id @default(cuid())
  name               String
  authorId           String
  description        String
  isPublic           Boolean             @default(false)
  author             User                @relation(fields: [authorId], references: [id])
  problemListRecords ProblemListRecord[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  stars              Star[]
}

model ProblemListRecord {
  id            Int         @id @default(autoincrement())
  problemListId String
  problemId     Int
  memo          String
  hint          String
  order         Int
  problemList   ProblemList @relation(fields: [problemListId], references: [id])
  problem       Problem     @relation(fields: [problemId], references: [id])
}

model Star {
  id            String      @id @default(cuid())
  userId        String
  problemListId String
  user          User        @relation(fields: [userId], references: [id])
  problemList   ProblemList @relation(fields: [problemListId], references: [id])

  @@unique([userId, problemListId], name: "star_identifier")
}
